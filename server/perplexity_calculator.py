import torch
from math import exp
from sample_creator import tokenize
from transformers import GPT2TokenizerFast, GPT2LMHeadModel, DataCollatorWithPadding#, pipeline

tokenizer = GPT2TokenizerFast.from_pretrained("entropy/gpt2_zinc_87m", max_len=40)
model = GPT2LMHeadModel.from_pretrained('entropy/gpt2_zinc_87m')

# molecules = [
#     "C(CC(C(TC(C(C)(C1CTC1)))F)(C(T)(X)))C___",
#     "C(C(C(C(C1CC(CTC)C1(X))(CN=CTT))))C_____",
#     "C(CC(CC#CCTCCOCCTCCCCCCCCOCCC1CTCTC1))C_",
#     "C(CC(C(TC(C(C)(C1CTC1)))))(C(T)(X))SC___",
#     "C1CC(CC)C(CCCC(CTCCSCOCCTCTCCTCCCCTC))C1",
#     "C(CC(CC#CC#CCTCTCTCCCOCTC1CTCC1))C______",
#     "C1CC(C)C(CC(CCTCCOC)CTC(C2CCCTC2))C1____",
#     "C(C(C(C(C#CC(C1CTC1(T))(CCT)C)X)))C_____",
#     "C(CC(C(=C(C(CTTC1CTC1)))F)=C(T)(T))=C___",
#     "C(CC(C(=C(C(C)(C1CTC1)))X)(C(F)(R)))C___",
#     "C(CC(CC=CCTCCTCCOCCTCCOCCOCOC1CTCTC1))C_",
#     "C(CC(CC1CC=CC(CTCTCTCCTCC2CCC2)C1))C____",
#     "C(CC(C(=C(C(CS(C1CTC1))(T)T))C)(T))TC___",
#     "C(C(C(C(CCCC(C1CTC1(T))(COT)X)R)))C_____",
#     "C1CC(CTC(CC#CC#CCTCOCTCOC2CTCTC2))C1____",
#     "C1CC(CC)C(COCC(CTCCSC#CCTCOCCTCCTCTC))C1",
#     "C(CC(CC1CCTCC(C=CTCOCCTCC#CCTT)C1))C____",
#     "C(CC(C(TC(C(C)(C1CTC1)))X)(C(C)(Cl)))C__",
#     "C(CC(CC1CC=CC(CTCTCTCCTCC2CCC2)C1))C____",
#     "CTCCOCCTCCOCCOCCTCC(TC)(COCC1(CCSCF))C1_",
#     "C(C(C(C(C1CC(C)CTC1(X))(C)C)(TR)))C_____",
#     "C1CC(C)C(CC(CCTCCOC)CTC(C2CCCTC2))C1____",
#     "C(C(C(C(C(C1CTCC1)=T)TC2CCTTC2)))C______",
#     "C1CC(CC)C(CCCC(CTCCSCOCCTCTCCTCCCCTC))C1",
#     "C(CC(CCTCC#CCTCCOCC#CCOCCTCCC1CTCTC1))CF",
#     "C1CC(C)C(CCOCCOCCTCTCTC(C2CTCTC2))C1____",
#     "C1CC(CC)C(C(CCTCOCCTCOCCTCOCCTCCTCOC))C1",
#     "C(CC(CCTCCOCCTCCTCCCCCCCCOCOCTC1CTC1))C_",
#     "C(C(C(C(C#CC(C1CTC1(T))(CTC)T)T)))C_____",
#     "C1CC(C=C(CC=CCTCCOCTCTCOC2CTCTC2))C1____",
# ]

# molecules = [
#     "c1onnc1[N+]C(T)(OCOOI)[C@]ON=NTTc2ncnn2Br",
#     "BrCCC(CCTCC(CC1CCCCC1)CCCCCCCTCC)C2CCCCC2",
#     "c1[nH]c2c(OTTTO[C@@H]2(Br))c1TTOSCSSSSSSCl",
#     "c1csnc1OS\\N=C(N=Nc2sncc2CC3(I)SS3)\\[TH+]",
#     "Ic1oncc1TON=COOT[N+](Cl)TC([TH+][TH+]F)TI",
#     "[TH3+]ON(C(Cl))O[C@@]=NN=C=NSOCc1cccn1CCSI",
#     "N1SSCSS[C@@]([TH+]N(S[C@@H]OTC=CBr)I)=N1_",
#     "Clc1oc2c(OS[N+]N2)c1c3[nH]nc(C(Br)(I))c3ST",
#     "N1N([C@][C@H]=CN=Cc2nsc(S(SI))c2)TSOOOS1",
#     "C1(S[N+]2(O[N+][N+]ON2)N1)(I)S/N=C(OI)\\T",
#     "c1scnc1C2(SSTTOC3(TCTO3)N2)N(S(I))STCCl__",
#     "S(Br)Sc1onnc1ON=CTOC(C(Br))CTO[TH+]c2cnno2",
#     "c1cscc1N2S(=O)(=O)N2(C[C@]#CSc3sccc3SI)_",
#     "IOSOSO/N=C\\C1([TH+]C2(N=[N+]S2)C1(Cl)(Br))",
#     "N1OOOTTOC1(F)(N2C3(TTCSC=CC3)COSN2(SSI))",
#     "ClN1TSTCSC(R)(N2SSN=NC(c3snnc3I)T2)[N+]1_",
#     "BrT/C=N\\C(I)(C#COc1sncc1TOc2nnn(O(C))c2)_",
#     "S1TN=C(Br)[C@@H]TN(S[C@]=NCC=NSOOS(I))T1_",
#     "O1OOSN(R)TSN1(CC/C=C/N(OC#[N+][C@]SSSI))",
#     "c1snnc1[N+]N(R)SC(N(F)I)\\C(I)=[N+]\\[C@]_",
#     "BrCCC(CC(COCCCCCCC)CTCCCCTCC1CCC1)C2CCCC2",
#     "O=C=NTc1oc(C)c(C#CSC(I)I)c1[C@@][TH+]=NF",
#     "IN=NOc1n[nH]nc1S(=O)(=O)[C@@](S(Br))TOOOF",
#     "O=NOc1snnc1c2[nH]nc(Cl)c2[N+]\\C(I)=C(Br)\\O",
#     "[N+](SSSSSc1cc([C@H]OTR)cn1F)[C@@H]SN=NI",
#     "ClOC(F)[C@@H]c1ncc(c2snnc2N3TN(SI)S3)n1CX",
#     "FCTc1snnc1[TH+](I)N=[N+]C(I)=NC=NO[TH+]C",
#     "RS/[N+]=N/[N+](TTc1[nH]cnc1SCSSSSSI)(CX)",
#     "Ic1occc1N2C=[N+](ON3C(I)SO3)CT[C@@H]=NT2",
#     "T[C@H]TTOc1nn[nH]c1N=COc2oc(C(I)C3)c3c2I",
#     "c1sccc1TN=CT[TH+]OSN=C(R)N(SC2OSSS2)OCCBr",
#     "S1CC(CC(CC(CC(CC)CC)CCSCCSCC)CC2CSC2)SC1",
#     "c1[nH]ncc1OSN(N=[TH+]C(I)(I)OTCX)T\\N=C/O",
#     "c1ocnc1C2(TTSCTT[C@]2)[TH+](CSSSSSI)TSOR",
#     "C1CC(CC(CC(CCOCCOCC)CC)CCSCCSCC2CSC2)SC1",
#     "ISC(TC(CTCCCC)C(TC(C1CCCC1)C)C2CC=CSC2)F",
#     "BrTc1c(TT(OOS(SN(TSI)S[C@]X)))ncn1T[N+]#N",
#     "I[N+]=C(TTCI)C1(C(F)(OC[N+]F)N=NCl)TTTCC1",
#     "BrSCC(C(CC(CCCC)CTCC)CSC1SCTC1)CSC2CTCTC2",
#     "ClC(OSSSSN(SN=NC[C@@])OC(OSSSO1)[N+]1OR)R",
#     "S(R)Oc1c([C@H]OSSSI)ccn1CSC[C@]N([N+]C)R",
#     "Cc1[nH]ccc1S(=O)(=O)[N+]N=CSC(OSSI)=NOTC",
#     "S=Nc1[nH]c2c(CTOSN2(Cl))c1c3c(OF)sc(Br)c3Br",
#     "Brc1coc(Br)c1c2c(SS3)c3c(Cl)n2[TH+]OTCC=NTCl",
#     "CN(Cl)CT/C(C/N=N/C(c1ncsc1C2OS2)(OI))=N/S",
#     "IT(c1sc(X)c([N+]SSCc2snnc2N=NTCC3CS3)n1)",
#     "ITN(I)\\[N+](SSc1cc2(N(Cl)O2)cc1T)=[TH+]\\O",
#     "O1TSN=[N+]CC2(TCC3(OCSN(CCSI)C3)N2(Br))T1",
#     "ISC(SC(CCCC(CTCC)C(C1CCCC1)C)C2OC=CTC2)F",
#     "T=CSc1sncc1O[C@]SN(X)c2c(TSCTS(I))ccn2TF",
#     "S=NSSOSTSN1CTTTSC(Br)(N=C2(N(SS3)N3))C2O1",
#     "BrSCC(C(CC(CCCC)CTCC)CSC1SCTC1)CSC2CTCTC2",
#     "Br/[C@H]=N\\[C@H](Cc1[nH]c2c(C(I)=N2)c1CI)",
#     "RS(c1c2c(ON([O-])[TH+]CN2)oc1OSN(Br)CCCI)",
#     "C(CC(C(CCSCCCC)COCC)COCCSCTCCTC)C1CSCSC1",
#     "c1sccc1COTTSN=[C@H]OCSN(N=T)TOTC(CCl)=NOI",
#     "N1SOTSTC(OO[C@H](N=NX)N(SBr)O(OOI))=[N+]1",
#     "C(C(CCC(CC(CC)CC1CCTCC1)T2)C2CC3CSCC3)SI",
#     "C(CC(CCSCCCCCSCC1CSSCCC1))CC2C(C3CSC3)S2",
#     "TOC(SC(CSCC(C#CCTC(C))C#CCOC)C1OC=CTC1)I",
#     "CN=Cc1occc1N(=COT/N=N/N(OSN(N(SBr)Br)C#N))",
#     "I[TH+]=NC(I)SCTCTN(N=NCC1(=NSST))[TH+]1R",
#     "BrN(I)c1oc([TH+]N=[C@H]CN(F)OC=NN(Cl)Cl)cn1",
#     "O1O[TH+]1(C(TTI)C(I)=NSCN=N[C@@]CTOSC)__",
#     "Cl[TH+]Sc1c[nH]nc1c2coc(Br)c2TC(C(I))N3SO3",
#     "FSS[N+]1(SN=NC[N+]2(N=[N+](I)O2)C1(Br))CCl",
#     "I\\N=N/N(N1CSCSSC1(=C=[N+]c2oc(OCT)nc2Cl))",
#     "C1TC(N2N(c3ccsc3SSSI)O[C@@]=NC[C@H]2)SN1",
#     "Rc1cscc1N=NOOSSCc2sc3c(N(R)[N+]3(I))c2CC",
#     "ClN1TSC=NON1(N(=Nc2snnc2T/N=C(CC)/C(SI)))",
#     "Xc1[nH]nnc1c2cn[nH]c2CTO/C=C(CC(I)(I))/O",
#     "C=[N+]c1[nH]cnc1c2[nH]nc(CCl)c2CSC(I)OBr__",
#     "C(CC(C(CCSCCCC)COCC)COCCSCTCCTC)C1CSCSC1",
#     "O(c1[nH]c(c2[nH]cnc2Cl)c(c3sccn3)n1)SCCSI",
#     "TOC(SC(CSCC(C#CCTC(C))C#CCOC)C1OC=CTC1)I",
#     "ClN(F)O/N=N\\C1(STTTTSN1([N+]c2ocnc2SSI))_",
#     "CCCC(CC(CC(CCTCCOCCOCCSCC)CC)CC1CSCSC1)_",
#     "ITCC(CC(CCTCCCCCTCC(CC)CC)CC)CC(CCCC1)C1",
#     "Rc1[nH]nnc1OO[N+]N(CSI)C[C@@]([C@@H]I)=S",
#     "IOc1csc(CTBr)c1C(CTC=[C@H]TTF)=NSSC[C@@H]",
#     "IO\\N=C\\C1([C@H]OTCN=C(TN=NN2SOSSSS2)C1)_",
#     "c1sncc1c2oc(F)nc2c3snc(TOOSBr)c3SOOO[C@H]",
#     "N1SS[C@@H]S[N+]N(TTTN2(c3csnc3SSI))N2S1_",
#     "S(CSC(C)CC1CSCSC1)C2C(CCSC3)C3C(CSC)CSC2",
#     "ClTc1nnnc2c1nncc2SSSN=[TH+]SCC(F)(C)TSTOBr",
#     "c1nsnc1STc2[nH]c([N+]C(SOI)CC=[N+]C)nc2Cl",
#     "C[C@H]Sc1c(c2onnc2Br)cn(N=CC3SS3)c1N(CBr)X",
#     "Clc1csc(X)c1SOSN(Br)N(CT2)[C@@H]2[C@H]SCOBr",
#     "S1SN1(c2oc3c(TCST[TH+]=[C@]3)c2SC(I)(I))",
#     "Fc1c2([N+]CC=CT2)nc(I)c1[TH+]N=C=NC(I)CCl",
#     "TTC(SC(C)C#CTCOC#CSC)CSCCSCSC#CSC1CSCTC1",
#     "c1c[nH]cc1N2ON(T(I))C(C=NX)([C@]OI)TOS2_",
#     "XTN=[N+]Sc1snc(OI)c1COC2(CS2)c3cc(Cl)cn3F",
#     "ClCTN1SC(Br)N(N=O)CTON1(N2CTN=[C@]2(OSSBr))",
#     "N#[C@]O(Cc1ocnc1SSSO[TH+]c2nsc(S(I))n2)_",
#     "C(S[TH+]1SSSTOCN1(OS(SSC[C@H]CCCOOBr)))#N",
#     "N(R)(R)SCSOc1occc1SOCCN=NC=C(TOI)C#[C@]F",
#     "S(Cl)Cc1conc1TT\\N=C([TH+]\\N=C\\C(OI)(I))\\T",
#     "BrN=[TH+][N+](N(C(I)I)R)O[TH+](COOTN1)N1F",
#     "TTC(SC(C)C#CTCOC#CSC)CSCCSCSC#CSC1CSCTC1",
#     "XOC1(T[N+]S[C@]1)N=CSC(R)(I)C(Cl)=NSN=NBr_",
#     "BrSC(=C(CTCTCSC1CSCTC1)C2CSC2)CCTC3CTCSC3",
#     "[C@H]C(F)=CCO[C@H]c1ncc(OOC2SSSSSS2)n1TBr",
#     "O1OTTT[TH+]ON1(Sc2nscc2c3onnc3SN(I)Br)___",
#     "S(OX)O(ON=CCCOCCSTCc1nnnnc1N2[N+]SCSSS2)",
#     "S(S(Br))C(I)([N+]=NSS[C@]1)N1SO\\[TH+]=C/C",
#     "c1c[nH]cc1c2n(Br)c3c(TN=NTC[C@]3)c2OSOCOI",
#     "T=NOc1onnc1OSSTOSCN([N+]2CS2)C(I)=N[C@]X",
#     "Br[TH+][C@H]OOCc1nonc1c2csnc2C(Cl)(I)N3TO3",
#     "COCc1[nH]ncc1TS[C@H][TH+]=C(Br)C(I)OSTSST",
#     "O1T[N+](=NSOI)CN1(C2N(C(I)CCC[C@@]#N)C2)",
#     "N1C[C@]CTSC([C@H][C@]TCC#[C@]ON(I)SI)=C1",
#     "c1[nH]cnc1N(N2N(SBr)TOOSS[N+]2)(C3CC3(I))",
#     "C(CC(CCOCCSCC)CC)CCTCCTCCTCCCCCCC1CSCSC1",
# ]

molecules = [
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4ocnc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4occc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4oncc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4onnc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4sccc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4scnc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4snnc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4sncc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4cscc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4csnc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4ccsc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4ccoc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4cnoc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4cnsc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4conc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4cocc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4nnsc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4nnoc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4ncoc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4ncsc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4nsnc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4nscc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4nocc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4nonc4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4ncnn4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4nccn4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4nncn4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4nnnn4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4ccnn4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4cccn4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4cnnn4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1c4cncn4SC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]F))c1[N+]SCSC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]X))c1[N+]SCSC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]I))c1[N+]SCSC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]R))c1[N+]SCSC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]Cl))c1[N+]SCSC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]C))c1[N+]SCSC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]Br))c1[N+]SCSC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]T))c1[N+]SCSC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]X))c1[C@]SCSC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]I))c1[C@]SCSC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]R))c1[C@]SCSC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]Br))c1[C@]SCSC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]Cl))c1[C@]SCSC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]C))c1[C@]SCSC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]T))c1[C@]SCSC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]F))c1[C@]SCSC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1[C@@]SCSC",
    "Fc1c2(SSCTOOO2)c3c(TN3([N+]))c1[C@H]SCSC",
    "C(CCCCCCCCCCCCCCCCCCCCCC(CCCCCCCCC(C)))_",
    "C(CCCCCCCCCCCCCCCCCCCCCC(CCCCCCCCC(C)))C",
    "T(CCCCCCCCCCCCCCCCCCCCCC(CCCCCCCCC(C)))_",
    "C(CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC(CC))_",
    "C(CCCCCCCCCCCCCCCCCCCCCC(CCCCCCCCC(T)))_",
    "C(CCCCCCCCCCCCCC(CCCCCCC(CCCCCCCCCCC)))_",
    "C(CCCCCCCCCCCCCCCCCCCCCCCCC(CCCCCC(C)))_",
    "C(CCCCCCCCCCCCCCCCCCCCCCCCCCCC(CCC(C)))_",
    "C(CCCCCCCCCCCCCC(CCCCCCCCCCCCC(CC)(C)))_",
    "C(CCCCCCC(CCCCCCCCCCCCCC(CCCCCCCCCCC)))_",
    "C(CCCCCCCCCC(CCCCCCCCCCC(CCCCCCCCCCC)))_",
    "C(CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC(CC)C)_",
    "C(CCCCCCCCCCCCCCCCCCCCCCCCCCCCC(CC(C)))_",
    "C(CCCCCCCCCCCCCCCCCCCCCCCCCCCCCC(C(C)))_",
    "C(CCCCCCCCCCCCCCCCCCCCCCCCCC(CCCCC(C)))_",
    "C(CCCCCCCCCCCCC(CCCCCCCC(CCCCCCCCCCC)))_",
    "C(CCCCCCCCCCCCCCCCCCCCCCCCCCC(CCCC(C)))_",
    "C(CCCCCCCCCCCCCCCCCCCCCCC(CCCCCCCC(C)))_",
    "C(CCCCCCCCCCCCCCCC(CCCCCCCCCCC(CCCCC)))_",
    "C(CCCCCCCCCCCCCCCCCCC(CCCCCCCCCCCC(C)))_",
    "C(CCCCCCCCCCCCCCCCCCCC(CCCCCCC(CCCCC)))_",
    "C(CCCCCCCCCCCCCCCCCCCCCCCC(CCCC(CCCC)))_",
    "C(CCCCCCCCCCCCCCCCC(CCCCCCCCCCCCCC(C)))_",
    "C(CCCCCCCCCCCCCCCCCCCCC(CCCCCCC(CCCC)))_",
    "C(CCCCC(CCCCCCCCCCCCCCCCCCCCCC(CCCCC)))_",
    "C(CCCC(CCCCCCCCCCCCCCCCCCCCCCC(CCCCC)))_",
    "C(CCCCCCCCCCCCCCCCCCCCCC(CCCCCCCCC(C))C)",
    "C(CCCCCCCCCCC(CCCCCCCCCC(CCCCCCCCCCC)))_",
    "C(CCCCCCCCCCCCCCCCCC(CCCCCCCCCC(CCCC)))_",
    "C(CCCCCCCC(CCCCCCCCCCCCCC(CCCCCCCCCC)))_",
    "C(CCCCCCCCCCCCCCC(CCCCCCCCCCCCC(CCCC)))_",
    "C(CCCCCCCCCCCC(CCCCCCCCCCCCCCCCCCC(C)))_",
    "C(CCCCCCCCC(CCCCCCCCCCCCC(CCCCCCCCCC)))_",
    "C(CC(CCCCCCCCCCCCCCCCCCCCCCCCC(CCCCC)))_",
    "C(C(CCCCCCCCCCCCCCCCCCCCCCCCCCCCCC(C)))_",
    "C(CCCCCC(CCCCCCCCCCCCCCCC(CCCCCCCCCC)))_",
    "C(CCC(CCCCCCCCCCCCCCCCCCC(CCCCCCCCCC)))_",
    "CC(CCCCCCCCCCCCCCCCCCCCCCCCC(CC(CCCC)))_",
    "C(CCCCCCCCCCCCCCCCCCCCCC(CCCCCCCCC(C)))_",
    "C(CCCCCCCCCCCCCCCCCCCCCC(CCCCCCCCC(C)))C",
    "C(CCCCCCCCCCCCCCCCCCCCCC(CCCCCCCCC(C)))T",
    "T(CCCCCCCCCCCCCCCCCCCCCC(CCCCCCCCC(C)))_",
    "T(CCCCCCCCCCCCCCCCCCCCCC(CCCCCCCCC(C)))C",
    "S(CCCCCCCCCCCCCCCCCCCCCC(CCCCCCCCC(C)))_",
    "C(CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC(CC))_",
    "C(CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC(CC))C",
    "T(CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC(CC))_",
    "C(CCCCCCCCCCCCCCCCCCCCCC(CCCCCCCCCCCC))_",
    "C(CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC(CT))_",
    "C(CCCCCCCCCCCCCCCCCCCCCC(CCCCCCCCC(T)))_"
]

molecules = set([iter.rstrip('_').replace('T','N').replace('X','O').replace('R','S') for iter in molecules])
print('\n'.join(molecules))
print(len(molecules))

molecule_perplexity = []
for m,mol in enumerate(molecules):
    tokenize_input = tokenizer.tokenize(mol)
    tensor_input = torch.tensor([tokenizer.convert_tokens_to_ids(tokenize_input)])
    out = model(tensor_input, labels=tensor_input)
    molecule_perplexity.append(exp(out.loss.item()))

print(sum(molecule_perplexity) / len(molecule_perplexity))